// Code generated by the Encore 1.49.1 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly auth: auth.ServiceClient
    public readonly finance: finance.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.auth = new auth.ServiceClient(base)
        this.finance = new finance.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * Import the auth handler to be able to derive the auth type
 */
import type { auth as auth_auth } from "~backend/auth/auth";

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: RequestType<typeof auth_auth> | AuthDataGenerator
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getUserInfo as api_auth_user_getUserInfo } from "~backend/auth/user";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getUserInfo = this.getUserInfo.bind(this)
        }

        /**
         * Gets the current authenticated user's information.
         */
        public async getUserInfo(): Promise<ResponseType<typeof api_auth_user_getUserInfo>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/me`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_user_getUserInfo>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createBackup as api_finance_backup_createBackup,
    deleteBackup as api_finance_backup_deleteBackup,
    downloadBackup as api_finance_backup_downloadBackup,
    listBackups as api_finance_backup_listBackups,
    restoreBackup as api_finance_backup_restoreBackup
} from "~backend/finance/backup";
import {
    getBillReminders as api_finance_bill_reminders_getBillReminders,
    triggerAutoDetection as api_finance_bill_reminders_triggerAutoDetection
} from "~backend/finance/bill_reminders";
import { createBill as api_finance_create_bill_createBill } from "~backend/finance/create_bill";
import { createBudget as api_finance_create_budget_createBudget } from "~backend/finance/create_budget";
import { createCategory as api_finance_create_category_createCategory } from "~backend/finance/create_category";
import { createGoal as api_finance_create_goal_createGoal } from "~backend/finance/create_goal";
import { createTransaction as api_finance_create_transaction_createTransaction } from "~backend/finance/create_transaction";
import { deleteBill as api_finance_delete_bill_deleteBill } from "~backend/finance/delete_bill";
import { deleteBudget as api_finance_delete_budget_deleteBudget } from "~backend/finance/delete_budget";
import { deleteCategory as api_finance_delete_category_deleteCategory } from "~backend/finance/delete_category";
import { deleteGoal as api_finance_delete_goal_deleteGoal } from "~backend/finance/delete_goal";
import { deleteTransaction as api_finance_delete_transaction_deleteTransaction } from "~backend/finance/delete_transaction";
import { exportCsv as api_finance_export_csv_exportCsv } from "~backend/finance/export_csv";
import { getReports as api_finance_get_reports_getReports } from "~backend/finance/get_reports";
import { importCsv as api_finance_import_csv_importCsv } from "~backend/finance/import_csv";
import { getInsights as api_finance_insights_getInsights } from "~backend/finance/insights";
import { listBillPayments as api_finance_list_bill_payments_listBillPayments } from "~backend/finance/list_bill_payments";
import { listBills as api_finance_list_bills_listBills } from "~backend/finance/list_bills";
import { listBudgets as api_finance_list_budgets_listBudgets } from "~backend/finance/list_budgets";
import { listCategories as api_finance_list_categories_listCategories } from "~backend/finance/list_categories";
import { listGoals as api_finance_list_goals_listGoals } from "~backend/finance/list_goals";
import { listTransactions as api_finance_list_transactions_listTransactions } from "~backend/finance/list_transactions";
import { markBillPaid as api_finance_mark_bill_paid_markBillPaid } from "~backend/finance/mark_bill_paid";
import {
    getBudgetAlerts as api_finance_notifications_getBudgetAlerts,
    getNotificationPreferences as api_finance_notifications_getNotificationPreferences,
    updateNotificationPreferences as api_finance_notifications_updateNotificationPreferences
} from "~backend/finance/notifications";
import { triggerRecurringProcess as api_finance_recurring_service_triggerRecurringProcess } from "~backend/finance/recurring_service";
import { updateBill as api_finance_update_bill_updateBill } from "~backend/finance/update_bill";
import { updateBudget as api_finance_update_budget_updateBudget } from "~backend/finance/update_budget";
import { updateCategory as api_finance_update_category_updateCategory } from "~backend/finance/update_category";
import { updateGoal as api_finance_update_goal_updateGoal } from "~backend/finance/update_goal";
import { updateTransaction as api_finance_update_transaction_updateTransaction } from "~backend/finance/update_transaction";

export namespace finance {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createBackup = this.createBackup.bind(this)
            this.createBill = this.createBill.bind(this)
            this.createBudget = this.createBudget.bind(this)
            this.createCategory = this.createCategory.bind(this)
            this.createGoal = this.createGoal.bind(this)
            this.createTransaction = this.createTransaction.bind(this)
            this.deleteBackup = this.deleteBackup.bind(this)
            this.deleteBill = this.deleteBill.bind(this)
            this.deleteBudget = this.deleteBudget.bind(this)
            this.deleteCategory = this.deleteCategory.bind(this)
            this.deleteGoal = this.deleteGoal.bind(this)
            this.deleteTransaction = this.deleteTransaction.bind(this)
            this.downloadBackup = this.downloadBackup.bind(this)
            this.exportCsv = this.exportCsv.bind(this)
            this.getBillReminders = this.getBillReminders.bind(this)
            this.getBudgetAlerts = this.getBudgetAlerts.bind(this)
            this.getInsights = this.getInsights.bind(this)
            this.getNotificationPreferences = this.getNotificationPreferences.bind(this)
            this.getReports = this.getReports.bind(this)
            this.importCsv = this.importCsv.bind(this)
            this.listBackups = this.listBackups.bind(this)
            this.listBillPayments = this.listBillPayments.bind(this)
            this.listBills = this.listBills.bind(this)
            this.listBudgets = this.listBudgets.bind(this)
            this.listCategories = this.listCategories.bind(this)
            this.listGoals = this.listGoals.bind(this)
            this.listTransactions = this.listTransactions.bind(this)
            this.markBillPaid = this.markBillPaid.bind(this)
            this.restoreBackup = this.restoreBackup.bind(this)
            this.triggerAutoDetection = this.triggerAutoDetection.bind(this)
            this.triggerRecurringProcess = this.triggerRecurringProcess.bind(this)
            this.updateBill = this.updateBill.bind(this)
            this.updateBudget = this.updateBudget.bind(this)
            this.updateCategory = this.updateCategory.bind(this)
            this.updateGoal = this.updateGoal.bind(this)
            this.updateNotificationPreferences = this.updateNotificationPreferences.bind(this)
            this.updateTransaction = this.updateTransaction.bind(this)
        }

        /**
         * Creates a complete backup of user's financial data.
         */
        public async createBackup(): Promise<ResponseType<typeof api_finance_backup_createBackup>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/backup/create`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_backup_createBackup>
        }

        /**
         * Creates a new recurring bill.
         */
        public async createBill(params: RequestType<typeof api_finance_create_bill_createBill>): Promise<ResponseType<typeof api_finance_create_bill_createBill>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bills`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_create_bill_createBill>
        }

        /**
         * Creates a new budget for a category.
         */
        public async createBudget(params: RequestType<typeof api_finance_create_budget_createBudget>): Promise<ResponseType<typeof api_finance_create_budget_createBudget>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/budgets`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_create_budget_createBudget>
        }

        /**
         * Creates a new expense or income category.
         */
        public async createCategory(params: RequestType<typeof api_finance_create_category_createCategory>): Promise<ResponseType<typeof api_finance_create_category_createCategory>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/categories`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_create_category_createCategory>
        }

        /**
         * Creates a new financial goal.
         */
        public async createGoal(params: RequestType<typeof api_finance_create_goal_createGoal>): Promise<ResponseType<typeof api_finance_create_goal_createGoal>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/goals`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_create_goal_createGoal>
        }

        /**
         * Creates a new financial transaction.
         */
        public async createTransaction(params: RequestType<typeof api_finance_create_transaction_createTransaction>): Promise<ResponseType<typeof api_finance_create_transaction_createTransaction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_create_transaction_createTransaction>
        }

        /**
         * Deletes a backup file.
         */
        public async deleteBackup(params: { backupId: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/backup/${encodeURIComponent(params.backupId)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a bill and all associated payments.
         */
        public async deleteBill(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/bills/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a budget.
         */
        public async deleteBudget(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/budgets/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a category.
         */
        public async deleteCategory(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/categories/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a financial goal.
         */
        public async deleteGoal(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/goals/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a transaction.
         */
        public async deleteTransaction(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/transactions/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Downloads a backup file.
         */
        public async downloadBackup(params: { backupId: string }): Promise<ResponseType<typeof api_finance_backup_downloadBackup>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/backup/download/${encodeURIComponent(params.backupId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_backup_downloadBackup>
        }

        /**
         * Exports transactions to CSV format with optional filtering.
         */
        public async exportCsv(params: RequestType<typeof api_finance_export_csv_exportCsv>): Promise<ResponseType<typeof api_finance_export_csv_exportCsv>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                categoryIds:      params.categoryIds,
                endDate:          params.endDate,
                includeRecurring: params.includeRecurring === undefined ? undefined : String(params.includeRecurring),
                startDate:        params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/export`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_export_csv_exportCsv>
        }

        /**
         * Gets current bill reminders for the user interface.
         */
        public async getBillReminders(): Promise<ResponseType<typeof api_finance_bill_reminders_getBillReminders>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bills/reminders`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_bill_reminders_getBillReminders>
        }

        /**
         * Gets current budget alerts for the user interface.
         */
        public async getBudgetAlerts(): Promise<ResponseType<typeof api_finance_notifications_getBudgetAlerts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/budget-alerts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_notifications_getBudgetAlerts>
        }

        /**
         * Generates comprehensive financial insights including spending trends, category comparisons, and personalized recommendations.
         */
        public async getInsights(params: RequestType<typeof api_finance_insights_getInsights>): Promise<ResponseType<typeof api_finance_insights_getInsights>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                months: params.months === undefined ? undefined : String(params.months),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/insights`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_insights_getInsights>
        }

        /**
         * Gets user notification preferences.
         */
        public async getNotificationPreferences(): Promise<ResponseType<typeof api_finance_notifications_getNotificationPreferences>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/preferences`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_notifications_getNotificationPreferences>
        }

        /**
         * Generates financial reports and analytics for the specified date range.
         */
        public async getReports(params: RequestType<typeof api_finance_get_reports_getReports>): Promise<ResponseType<typeof api_finance_get_reports_getReports>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                endDate:   params.endDate,
                startDate: params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reports`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_get_reports_getReports>
        }

        /**
         * Imports transactions from CSV data with configurable column mapping.
         */
        public async importCsv(params: RequestType<typeof api_finance_import_csv_importCsv>): Promise<ResponseType<typeof api_finance_import_csv_importCsv>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/import`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_import_csv_importCsv>
        }

        /**
         * Lists all backups for the authenticated user.
         */
        public async listBackups(): Promise<ResponseType<typeof api_finance_backup_listBackups>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/backup/list`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_backup_listBackups>
        }

        /**
         * Retrieves bill payment history with optional filtering.
         */
        public async listBillPayments(params: RequestType<typeof api_finance_list_bill_payments_listBillPayments>): Promise<ResponseType<typeof api_finance_list_bill_payments_listBillPayments>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                billId:    params.billId === undefined ? undefined : String(params.billId),
                endDate:   params.endDate,
                limit:     params.limit === undefined ? undefined : String(params.limit),
                offset:    params.offset === undefined ? undefined : String(params.offset),
                startDate: params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bills/payments`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_list_bill_payments_listBillPayments>
        }

        /**
         * Retrieves all bills with optional filtering.
         */
        public async listBills(params: RequestType<typeof api_finance_list_bills_listBills>): Promise<ResponseType<typeof api_finance_list_bills_listBills>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                categoryIds: params.categoryIds,
                dueSoon:     params.dueSoon === undefined ? undefined : String(params.dueSoon),
                status:      params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bills`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_list_bills_listBills>
        }

        /**
         * Retrieves all budgets with spending information.
         */
        public async listBudgets(): Promise<ResponseType<typeof api_finance_list_budgets_listBudgets>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/budgets`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_list_budgets_listBudgets>
        }

        /**
         * Retrieves all expense and income categories for the authenticated user.
         */
        public async listCategories(): Promise<ResponseType<typeof api_finance_list_categories_listCategories>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/categories`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_list_categories_listCategories>
        }

        /**
         * Retrieves all financial goals.
         */
        public async listGoals(): Promise<ResponseType<typeof api_finance_list_goals_listGoals>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/goals`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_list_goals_listGoals>
        }

        /**
         * Retrieves transactions with advanced filtering by categories, date range, amount range, and description search.
         */
        public async listTransactions(params: RequestType<typeof api_finance_list_transactions_listTransactions>): Promise<ResponseType<typeof api_finance_list_transactions_listTransactions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                categoryIds: params.categoryIds,
                endDate:     params.endDate,
                limit:       params.limit === undefined ? undefined : String(params.limit),
                maxAmount:   params.maxAmount === undefined ? undefined : String(params.maxAmount),
                minAmount:   params.minAmount === undefined ? undefined : String(params.minAmount),
                offset:      params.offset === undefined ? undefined : String(params.offset),
                search:      params.search,
                startDate:   params.startDate,
                type:        params.type,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_list_transactions_listTransactions>
        }

        /**
         * Marks a bill as paid and creates a payment record.
         */
        public async markBillPaid(params: RequestType<typeof api_finance_mark_bill_paid_markBillPaid>): Promise<ResponseType<typeof api_finance_mark_bill_paid_markBillPaid>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                amount:        params.amount,
                notes:         params.notes,
                paidDate:      params.paidDate,
                transactionId: params.transactionId,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bills/${encodeURIComponent(params.id)}/pay`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_mark_bill_paid_markBillPaid>
        }

        /**
         * Restores data from a backup file.
         */
        public async restoreBackup(params: RequestType<typeof api_finance_backup_restoreBackup>): Promise<ResponseType<typeof api_finance_backup_restoreBackup>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/backup/restore`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_backup_restoreBackup>
        }

        /**
         * Manual trigger for auto-detection (for testing/admin use)
         */
        public async triggerAutoDetection(): Promise<ResponseType<typeof api_finance_bill_reminders_triggerAutoDetection>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bills/auto-detect`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_bill_reminders_triggerAutoDetection>
        }

        /**
         * Manual trigger for processing recurring transactions (for testing/admin use)
         */
        public async triggerRecurringProcess(): Promise<ResponseType<typeof api_finance_recurring_service_triggerRecurringProcess>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/recurring/process`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_recurring_service_triggerRecurringProcess>
        }

        /**
         * Updates an existing bill.
         */
        public async updateBill(params: RequestType<typeof api_finance_update_bill_updateBill>): Promise<ResponseType<typeof api_finance_update_bill_updateBill>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                amount:         params.amount,
                autoPayEnabled: params.autoPayEnabled,
                categoryId:     params.categoryId,
                description:    params.description,
                dueDate:        params.dueDate,
                frequency:      params.frequency,
                name:           params.name,
                reminderDays:   params.reminderDays,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bills/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_update_bill_updateBill>
        }

        /**
         * Updates an existing budget.
         */
        public async updateBudget(params: RequestType<typeof api_finance_update_budget_updateBudget>): Promise<ResponseType<typeof api_finance_update_budget_updateBudget>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                amount:     params.amount,
                categoryId: params.categoryId,
                endDate:    params.endDate,
                period:     params.period,
                startDate:  params.startDate,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/budgets/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_update_budget_updateBudget>
        }

        /**
         * Updates an existing category.
         */
        public async updateCategory(params: RequestType<typeof api_finance_update_category_updateCategory>): Promise<ResponseType<typeof api_finance_update_category_updateCategory>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                color: params.color,
                name:  params.name,
                type:  params.type,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/categories/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_update_category_updateCategory>
        }

        /**
         * Updates a financial goal.
         */
        public async updateGoal(params: RequestType<typeof api_finance_update_goal_updateGoal>): Promise<ResponseType<typeof api_finance_update_goal_updateGoal>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                currentAmount: params.currentAmount,
                description:   params.description,
                name:          params.name,
                targetAmount:  params.targetAmount,
                targetDate:    params.targetDate,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/goals/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_update_goal_updateGoal>
        }

        /**
         * Updates user notification preferences.
         */
        public async updateNotificationPreferences(params: RequestType<typeof api_finance_notifications_updateNotificationPreferences>): Promise<ResponseType<typeof api_finance_notifications_updateNotificationPreferences>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/preferences`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_notifications_updateNotificationPreferences>
        }

        /**
         * Updates an existing transaction.
         */
        public async updateTransaction(params: RequestType<typeof api_finance_update_transaction_updateTransaction>): Promise<ResponseType<typeof api_finance_update_transaction_updateTransaction>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                amount:             params.amount,
                categoryId:         params.categoryId,
                date:               params.date,
                description:        params.description,
                isRecurring:        params.isRecurring,
                recurringEndDate:   params.recurringEndDate,
                recurringFrequency: params.recurringFrequency,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_finance_update_transaction_updateTransaction>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | RequestType<typeof auth_auth>
  | Promise<RequestType<typeof auth_auth> | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.49.1)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: RequestType<typeof auth_auth> | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        // Import utility functions for retries
        const { withRetry, defaultShouldRetry } = await import('./utils/apiUtils');
        
        // Maximum number of retries for idempotent methods (GET, HEAD, OPTIONS)
        const MAX_RETRIES = 3;
        
        // Function to determine if a request is idempotent based on method
        const isIdempotent = (method?: string): boolean => {
            if (!method) return true; // Default to GET which is idempotent
            const idempotentMethods = ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE'];
            return idempotentMethods.includes(method.toUpperCase());
        };
        
        // The actual API call function
        const makeApiCall = async (): Promise<Response> => {
            let { query, headers, ...rest } = params ?? {}
            const init = {
                ...this.requestInit,
                ...rest,
            }

            // Merge our headers with any predefined headers
            init.headers = {...this.headers, ...init.headers, ...headers}

            // Fetch auth data if there is any
            const authData = await this.getAuthData();

            // If we now have authentication data, add it to the request
            if (authData) {
                if (authData.query) {
                    query = {...query, ...authData.query};
                }
                if (authData.headers) {
                    init.headers = {...init.headers, ...authData.headers};
                }
            }

            // Set up the request with timeout
            const timeoutMs = 30000; // 30 seconds timeout
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
            
            try {
                // Add the signal to the fetch request
                init.signal = controller.signal;
                
                // Make the actual request
                const queryString = query ? '?' + encodeQuery(query) : ''
                const response = await this.fetcher(this.baseURL+path+queryString, init)

                // handle any error responses
                if (!response.ok) {
                    // try and get the error message from the response body
                    let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

                    // if we can get the structured error we should, otherwise give a best effort
                    try {
                        const text = await response.text()

                        try {
                            const jsonBody = JSON.parse(text)
                            if (isAPIErrorResponse(jsonBody)) {
                                body = jsonBody
                            } else {
                                body.message += ": " + JSON.stringify(jsonBody)
                            }
                        } catch {
                            body.message += ": " + text
                        }
                    } catch (e) {
                        // otherwise we just append the text to the error message
                        body.message += ": " + String(e)
                    }

                    const apiError = new APIError(response.status, body);
                    apiError.response = response;
                    throw apiError;
                }

                return response;
            } catch (error) {
                // Handle abort errors (timeouts)
                if (error instanceof DOMException && error.name === 'AbortError') {
                    throw new APIError(0, { 
                        code: ErrCode.DeadlineExceeded, 
                        message: `Request timed out after ${timeoutMs}ms` 
                    });
                }
                
                // Handle network errors
                if (error instanceof TypeError && error.message.includes('network')) {
                    throw new APIError(0, { 
                        code: ErrCode.Unavailable, 
                        message: navigator.onLine 
                            ? 'Network request failed. Please check your connection.'
                            : 'You are currently offline. Please check your internet connection.'
                    });
                }
                
                // Re-throw API errors
                if (error instanceof APIError) {
                    throw error;
                }
                
                // Handle other errors
                throw new APIError(0, { 
                    code: ErrCode.Unknown, 
                    message: error instanceof Error ? error.message : String(error)
                });
            } finally {
                // Clear the timeout to prevent memory leaks
                clearTimeout(timeoutId);
            }
        };
        
        // Custom shouldRetry function that combines our logic with the default
        const shouldRetry = (error: any): boolean => {
            // Don't retry non-idempotent methods like POST to avoid duplicate operations
            if (!isIdempotent(params?.method)) {
                return false;
            }
            
            // Don't retry authentication errors
            if (error instanceof APIError && error.status === 401) {
                return false;
            }
            
            // Don't retry bad request errors
            if (error instanceof APIError && error.status === 400) {
                return false;
            }
            
            // Use the default retry logic for other errors
            return defaultShouldRetry(error);
        };
        
        // Use retry for idempotent methods, otherwise just make a single call
        if (isIdempotent(params?.method)) {
            return withRetry(makeApiCall, MAX_RETRIES, 1000, shouldRetry);
        } else {
            return makeApiCall();
        }
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    /**
     * The original Response object if available
     */
    public response?: Response

    /**
     * Whether this is a network error (offline, timeout, etc.)
     */
    public readonly isNetworkError: boolean

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // Set properties
        this.status = status;
        this.code = response.code;
        this.details = response.details;
        this.isNetworkError = status === 0 || 
            response.code === ErrCode.Unavailable || 
            response.code === ErrCode.DeadlineExceeded;

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
